package com.example.shopmanager.service.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.shopmanager.service.db.bean.BookInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_INFO".
*/
public class BookInfoDao extends AbstractDao<BookInfo, Long> {

    public static final String TABLENAME = "BOOK_INFO";

    /**
     * Properties of entity BookInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property BookNmae = new Property(2, String.class, "bookNmae", false, "BOOK_NMAE");
        public final static Property Price = new Property(3, String.class, "price", false, "PRICE");
        public final static Property OldPrice = new Property(4, String.class, "oldPrice", false, "OLD_PRICE");
        public final static Property Author = new Property(5, String.class, "author", false, "AUTHOR");
        public final static Property Press = new Property(6, String.class, "press", false, "PRESS");
        public final static Property Binding = new Property(7, String.class, "binding", false, "BINDING");
        public final static Property Score = new Property(8, String.class, "score", false, "SCORE");
        public final static Property Contents = new Property(9, String.class, "contents", false, "CONTENTS");
        public final static Property BookPhoto = new Property(10, String.class, "bookPhoto", false, "BOOK_PHOTO");
        public final static Property DeleSign = new Property(11, String.class, "deleSign", false, "DELE_SIGN");
    }


    public BookInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BookInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"CODE\" TEXT," + // 1: code
                "\"BOOK_NMAE\" TEXT," + // 2: bookNmae
                "\"PRICE\" TEXT," + // 3: price
                "\"OLD_PRICE\" TEXT," + // 4: oldPrice
                "\"AUTHOR\" TEXT," + // 5: author
                "\"PRESS\" TEXT," + // 6: press
                "\"BINDING\" TEXT," + // 7: binding
                "\"SCORE\" TEXT," + // 8: score
                "\"CONTENTS\" TEXT," + // 9: contents
                "\"BOOK_PHOTO\" TEXT," + // 10: bookPhoto
                "\"DELE_SIGN\" TEXT);"); // 11: deleSign
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookInfo entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String bookNmae = entity.getBookNmae();
        if (bookNmae != null) {
            stmt.bindString(3, bookNmae);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(4, price);
        }
 
        String oldPrice = entity.getOldPrice();
        if (oldPrice != null) {
            stmt.bindString(5, oldPrice);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
 
        String press = entity.getPress();
        if (press != null) {
            stmt.bindString(7, press);
        }
 
        String binding = entity.getBinding();
        if (binding != null) {
            stmt.bindString(8, binding);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(9, score);
        }
 
        String contents = entity.getContents();
        if (contents != null) {
            stmt.bindString(10, contents);
        }
 
        String bookPhoto = entity.getBookPhoto();
        if (bookPhoto != null) {
            stmt.bindString(11, bookPhoto);
        }
 
        String deleSign = entity.getDeleSign();
        if (deleSign != null) {
            stmt.bindString(12, deleSign);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookInfo entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String bookNmae = entity.getBookNmae();
        if (bookNmae != null) {
            stmt.bindString(3, bookNmae);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(4, price);
        }
 
        String oldPrice = entity.getOldPrice();
        if (oldPrice != null) {
            stmt.bindString(5, oldPrice);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
 
        String press = entity.getPress();
        if (press != null) {
            stmt.bindString(7, press);
        }
 
        String binding = entity.getBinding();
        if (binding != null) {
            stmt.bindString(8, binding);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(9, score);
        }
 
        String contents = entity.getContents();
        if (contents != null) {
            stmt.bindString(10, contents);
        }
 
        String bookPhoto = entity.getBookPhoto();
        if (bookPhoto != null) {
            stmt.bindString(11, bookPhoto);
        }
 
        String deleSign = entity.getDeleSign();
        if (deleSign != null) {
            stmt.bindString(12, deleSign);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookInfo readEntity(Cursor cursor, int offset) {
        BookInfo entity = new BookInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookNmae
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // price
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // oldPrice
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // author
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // press
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // binding
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // score
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // contents
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // bookPhoto
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // deleSign
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookInfo entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookNmae(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrice(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOldPrice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuthor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBinding(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setScore(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContents(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBookPhoto(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDeleSign(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookInfo entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookInfo entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookInfo entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
